package pro.taskana.adapter.integration;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.json.JSONException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.autoconfigure.web.reactive.AutoConfigureWebTestClient;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.context.SpringBootTest.WebEnvironment;
import org.springframework.test.context.ContextConfiguration;

import pro.taskana.Task;
import pro.taskana.TaskSummary;
import pro.taskana.adapter.test.TaskanaAdapterTestApplication;
import pro.taskana.exceptions.NotAuthorizedException;
import pro.taskana.exceptions.TaskNotFoundException;
import pro.taskana.security.JAASRunner;
import pro.taskana.security.WithAccessId;

/**
 * Test class to test the conversion of tasks generated by Camunda BPM to Taskana tasks.
 * 
 * @author Ben Fuernrohr
 */
@SpringBootTest(classes = TaskanaAdapterTestApplication.class, webEnvironment = WebEnvironment.DEFINED_PORT)
@AutoConfigureWebTestClient
@RunWith(JAASRunner.class)
@ContextConfiguration
public class TestTaskAcquisition extends AbsIntegrationTest {

    @WithAccessId(
        userName = "teamlead_1",
        groupNames = {"admin"})
    @Test
    public void user_task_process_instance_started_in_camunda_via_rest_should_result_in_taskanaTask()
        throws JSONException, InterruptedException {
        String processInstanceId = this.camundaProcessengineRequester
            .startCamundaProcessAndReturnId("simple_user_task_process", "");
        List<String> camundaTaskIds = this.camundaProcessengineRequester
            .getTaskIdsFromProcessInstanceId(processInstanceId);

        Thread.sleep(this.adapterTaskPollingInterval);

        for (String camundaTaskId : camundaTaskIds) {
            List<TaskSummary> taskanaTasks = this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
            assertEquals(1, taskanaTasks.size());
            String taskanaTaskExternalId = taskanaTasks.get(0).getExternalId();
            assertEquals(taskanaTaskExternalId, camundaTaskId);
        }
    }

    @WithAccessId(
        userName = "teamlead_1",
        groupNames = {"admin"})
    @Test
    public void multiple_user_task_process_instances_started_in_camunda_via_rest_should_result_in_multiple_taskanaTasks()
        throws JSONException, InterruptedException {
        int numberOfProcesses = 10;
        List<List<String>> camundaTaskIdsList = new ArrayList<List<String>>();
        for (int i = 0; i < numberOfProcesses; i++) {
            String processInstanceId = this.camundaProcessengineRequester
                .startCamundaProcessAndReturnId("simple_user_task_process", "");
            camundaTaskIdsList
                .add(this.camundaProcessengineRequester.getTaskIdsFromProcessInstanceId(processInstanceId));
        }
        Thread.sleep(this.adapterTaskPollingInterval);

        for (List<String> camundaTaskIds : camundaTaskIdsList) {
            for (String camundaTaskId : camundaTaskIds) {
                List<TaskSummary> taskanaTasks = this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
                assertEquals(1, taskanaTasks.size());
                String taskanaTaskExternalId = taskanaTasks.get(0).getExternalId();
                assertEquals(taskanaTaskExternalId, camundaTaskId);
            }
        }
    }

    @WithAccessId(
        userName = "teamlead_1",
        groupNames = {"admin"})
    @Test
    public void task_with_variables_should_result_in_taskanaTask_with_those_variables_in_custom_attributes()
        throws JSONException, InterruptedException, TaskNotFoundException, NotAuthorizedException {
        String variables = "\"variables\": {\"amount\": {\"value\":555, \"type\":\"long\"},\"item\": {\"value\": \"item-xyz\"}}";
        String processInstanceId = this.camundaProcessengineRequester
            .startCamundaProcessAndReturnId("simple_user_task_process", variables);
        List<String> camundaTaskIds = this.camundaProcessengineRequester
            .getTaskIdsFromProcessInstanceId(processInstanceId);

        Thread.sleep(this.adapterTaskPollingInterval);

        for (String camundaTaskId : camundaTaskIds) {
            List<TaskSummary> taskanaTasks = this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
            assertEquals(1, taskanaTasks.size());
            TaskSummary taskanaTaskSummary = taskanaTasks.get(0);
            String taskanaTaskExternalId = taskanaTaskSummary.getExternalId();
            assertEquals(taskanaTaskExternalId, camundaTaskId);

            // get the actual task instead of summary to access custom attributes
            Task taskanaTask = this.taskService.getTask(taskanaTaskSummary.getTaskId());
            Map<String, String> taskanaTaskCustomAttributes = taskanaTask.getCustomAttributes();

            // prepare assumed outcome
            Map<String, String> assumedTaskCustomAttributes = new HashMap<String, String>();
            String assumedKeyString = "referenced_task_variables";
            String assumedKeyValue = "{\"amount\":{\"type\":\"Long\",\"value\":555,\"valueInfo\":{}},\"item\":{\"type\":\"String\",\"value\":\"item-xyz\",\"valueInfo\":{}}}";
            assumedTaskCustomAttributes.put(assumedKeyString, assumedKeyValue);

            assertEquals(assumedTaskCustomAttributes, taskanaTaskCustomAttributes);
        }
    }

    @WithAccessId(
        userName = "teamlead_1",
        groupNames = {"admin"})
    @Test
    public void process_instance_with_multiple_executions_should_result_in_multiple_taskanaTasks()
        throws JSONException, InterruptedException {
        String processInstanceId = this.camundaProcessengineRequester
            .startCamundaProcessAndReturnId("simple_multiple_execution_process", "");
        List<String> camundaTaskIds = this.camundaProcessengineRequester
            .getTaskIdsFromProcessInstanceId(processInstanceId);
        assertEquals(camundaTaskIds.size(), 3);

        Thread.sleep(this.adapterTaskPollingInterval);

        for (String camundaTaskId : camundaTaskIds) {
            List<TaskSummary> taskanaTasks = this.taskService.createTaskQuery().externalIdIn(camundaTaskId).list();
            assertEquals(1, taskanaTasks.size());
            String taskanaTaskExternalId = taskanaTasks.get(0).getExternalId();
            assertEquals(taskanaTaskExternalId, camundaTaskId);
        }
    }
}